package ch.hevs.boe.physics

import ch.hevs.boe.GenStuff.CollisionGroupNames.CollisionGroupNames
import ch.hevs.boe.GenStuff.CollisionList
import ch.hevs.boe.draw.{DrawManager, Drawable}
import ch.hevs.boe.entity.player.Player
import ch.hevs.boe.projectile.Projectile
import ch.hevs.boe.utils.{Initiable, Utils}
import ch.hevs.gdx2d.lib.GdxGraphics

class Position(var x: Int, var y: Int) {
  def clonePos(): Position = {
    new Position(x, y)
  }
}

<<<<<<< HEAD
abstract class PhysicalObject(protected var _position: Position, protected var _width: Int, protected var _height: Int) extends Drawable with Initiable {
  def selfInit:Boolean

=======
abstract class PhysicalObject(protected var _position: Position, protected var _width: Int, protected var _height: Int) extends Drawable {
  protected val drawManagerId: Int = DrawManager.subscribe(draw)
>>>>>>> e01bdf8c5455bb61abd97b6b2ce52b6c78fd1f60
  def width = this._width

  def height = this._height

  def position = this._position
  def position_=(newVal: Position) = this._position = newVal

<<<<<<< HEAD
  private var drawManagerId = -1


  override protected def _init(): Unit = {
    drawManagerId = DrawManager.subscribe(draw)
    CollisionManager.addObjectToGroup(getCollisionGroup(), this, collision)
  }
=======
>>>>>>> e01bdf8c5455bb61abd97b6b2ce52b6c78fd1f60

  override def draw(g: GdxGraphics): Unit = {
    Utils.drawPhysicalObject(this, g)
    doGameplayTick()
  }

  def getCollisionGroup() : CollisionGroupNames

  def collision(list: CollisionList): Unit

  def doGameplayTick() = {}

  def maxX = {
    this.position.x + _width
  }
  def maxY = {
    this.position.y + _height
  }

  def checkCollision(rect: PhysicalObject, doubleChecked: Boolean = false): Boolean = {

    // checking collisions
    if(rect.position.x >= this.position.x && rect.position.x <= this.maxX) {
      if(rect.position.y >= this.position.y && rect.position.y <= this.maxY) {
        // Here we have a collision
        return true
      }
    }
    if(rect.maxX >= this.position.x && rect.maxX <= this.maxX) {
      if(rect.maxY >= this.position.y && rect.maxY <= this.maxY) {
        return true
      }
    }
    if(doubleChecked) {
      return false
    }
    rect.checkCollision(this, true)
  }

<<<<<<< HEAD
  override protected def _dispose(): Unit = {
    DrawManager.unsubscribe(drawManagerId)
    CollisionManager.removeObjectFromGroup(getCollisionGroup(), this)
  }

  if (selfInit) {
    init()
  }
=======
  def kill(): Unit = DrawManager.unsubscribe(drawManagerId)
>>>>>>> e01bdf8c5455bb61abd97b6b2ce52b6c78fd1f60
}